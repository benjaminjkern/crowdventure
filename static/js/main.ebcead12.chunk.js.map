{"version":3,"sources":["apolloURL.js","Node.jsx","Account.jsx","Home.jsx","App.jsx","index.jsx"],"names":["module","exports","ChoiceColumns","props","owner","account","choices","nodeID","canon","onEdit","CardColumns","map","choice","Card","className","href","to","ID","style","pointerEvents","color","undefined","onClick","setTimeout","window","location","reload","Body","cursor","Title","action","DropdownButton","variant","position","top","right","size","drop","title","class","Dropdown","Item","disabled","screenName","choiceID","app_fetch","query","then","res","err","alert","data","makeNonCanon","makeCanon","suggestedBy","Divider","Footer","dislikedBy","includes","dislikeSuggestion","score","likedBy","likeSuggestion","SearchPage","callback","toID","useState","allNodes","setAllNodes","toNode","setToNode","useEffect","getNode","filterBy","node","text","toLowerCase","defaultSelected","labelKey","options","placeholder","renderMenuItemChildren","Node","history","match","redirect","setRedirect","escape","params","id","setAccount","setNode","info","showSuggest","setShowSuggest","suggestAction","setSuggestAction","toPage","setToPage","showCreateNode","setShowCreateNode","setTitle","content","setContent","createNodeCallback","setCreateNodeCallback","showEditNode","setShowEditNode","editTitle","setEditTitle","editContent","setEditContent","showConfirm","setShowConfirm","showEditSuggest","setShowEditSuggest","setChoiceID","cookies","Cookies","loggedInAs","get","loginAccount","set","path","Alert","Heading","Container","split","line","canonChoices","length","Button","back","views","OverlayTrigger","overlay","Tooltip","width","nonCanonChoices","Modal","show","onHide","Header","closeButton","Form","Label","Control","required","value","onChange","e","target","editChoice","escaped","createNewAction","as","rows","esTitle","esContent","createNode","editNode","Account","accountID","loggedInAsID","setLoggedInAs","showEditPage","setShowEditPage","bio","setBio","getAccount","left","totalNodeViews","totalSuggestionScore","nodes","featured","alreadyFeatured","featurePage","esBio","editAccount","Home","topNodes","setTopNodes","featuredNodes","AccountManager","showLogin","setShowLogin","showSignUp","setShowSignUp","setInfo","setScreenName","pass1","setPass1","pass2","setPass2","createAccount","esScreenName","esPass","Navbar","Text","type","login","Group","handleSubmitSignUp","App","expand","Brand","src","process","alt","Toggle","aria-controls","Collapse","component","exact","render","createApolloFetch","require","uri","newlines","replace","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ebcead12.chunk.js","sourcesContent":["module.exports =\n    \"https://3yfp7ejc0m.execute-api.us-east-1.amazonaws.com/dev/graphql\";","import React, { useState, useEffect, useRef } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  Card,\n  CardColumns,\n  DropdownButton,\n  Dropdown,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport { app_fetch, escape } from \"./index\";\n\nconst Node = (props) => {\n  const { history, match } = props;\n  const [redirect, setRedirect] = useState(undefined);\n  const nodeID = escape(match.params.id);\n  const [account, setAccount] = useState(undefined);\n  const [node, setNode] = useState(undefined);\n\n  const [info, setInfo] = useState(\"\");\n\n  const [showSuggest, setShowSuggest] = useState(false);\n  const [suggestAction, setSuggestAction] = useState(\"\");\n  const [toPage, setToPage] = useState(\"\");\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [createNodeCallback, setCreateNodeCallback] = useState(undefined);\n\n  const [showEditNode, setShowEditNode] = useState(false);\n  const [editTitle, setEditTitle] = useState(\"\");\n  const [editContent, setEditContent] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const [showEditSuggest, setShowEditSuggest] = useState(false);\n  const [choiceID, setChoiceID] = useState(\"\");\n\n  const createNode = () => {\n    const esTitle = escape(title);\n    const esContent = escape(content, true);\n    app_fetch({\n      query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${esTitle}\",content:\"\"\"${esContent}\"\"\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createNode) {\n        createNodeCallback[0](res.data.createNode.ID);\n      } else alert(\"Something went wrong when creating node\");\n    });\n  };\n\n  const editNode = () => {\n    const esTitle = escape(editTitle);\n    const esContent = escape(editContent, true);\n    app_fetch({\n      query: `mutation{editNode(nodeID:\"${nodeID}\",title:\"${esTitle}\",content:\"\"\"${esContent}\"\"\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.editNode) {\n        setShowEditNode(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when editing node\");\n    });\n  };\n\n  const createNewAction = (toID) => {\n    if (!toID) {\n      setShowSuggest(false);\n      setShowCreateNode(true);\n      setCreateNodeCallback([createNewAction]);\n    } else {\n      const escaped = escape(suggestAction);\n      app_fetch({\n        query: `mutation{suggestChoice(accountScreenName:\"${account.screenName}\",fromID:\"${nodeID}\",action:\"${escaped}\",toID:\"${toID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) {\n          setShowSuggest(false);\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when creating choice!\");\n      });\n    }\n  };\n\n  const deletePage = () => {\n    app_fetch({\n      query: `mutation{deleteNode(nodeID:\"${nodeID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setRedirect(<Redirect to=\"/\" />);\n      else alert(\"Something went wrong when deleting node\");\n    });\n  };\n\n  const editChoice = (toID) => {\n    if (!toID) {\n      setShowEditSuggest(false);\n      setShowCreateNode(true);\n      setCreateNodeCallback([editChoice]);\n    } else {\n      let escaped = escape(suggestAction);\n      app_fetch({\n        query: `mutation{editSuggestion(choiceID:\"${choiceID}\",action:\"${escaped}\",toID:\"${toID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) {\n          setShowEditSuggest(false);\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when editing choice!\");\n      });\n    }\n  };\n\n  useEffect(() => {\n    const cookies = new Cookies();\n    const loggedInAs = escape(cookies.get(\"account\"));\n\n    app_fetch({\n      query: `query{getNode(ID:\"${nodeID}\"){ID,title,content,views,owner{screenName},canonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}},nonCanonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.getNode) setNode(res.data.getNode);\n      else setNode(null);\n    });\n\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.loginAccount);\n      else {\n        alert(\"Something went wrong when retrieving account logging out\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n  }, []);\n\n  if (node === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (node === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1>{node.title}</h1>\n      <Container>\n        {node.content.split(\"\\n\").map((line) => (\n          <p>{line}</p>\n        ))}\n      </Container>\n      <p />\n      {node.canonChoices.length ? (\n        <ChoiceColumns\n          owner={node.owner}\n          choices={node.canonChoices}\n          account={account}\n          canon={true}\n          nodeID={node.ID}\n          onEdit={(choice) => {\n            setSuggestAction(choice.action);\n            setToPage(choice.to.ID);\n            setChoiceID(choice.ID);\n            setShowEditSuggest(true);\n          }}\n        />\n      ) : (\n        <p className=\"text-muted\">\n          By decree of <strong>{node.owner.screenName}</strong>, this journey\n          ends here.\n        </p>\n      )}\n      <p />\n\n      <Button\n        variant=\"light\"\n        className=\"text-primary\"\n        onClick={() => {\n          history.back();\n          setTimeout(() => window.location.reload(false), 100);\n        }}\n        size=\"sm\"\n      >\n        Go back!\n      </Button>\n\n      <p />\n      <p>\n        Owner:{\" \"}\n        <a href={`/crowdventure/#/account/${node.owner.screenName}`}>\n          {node.owner.screenName}\n        </a>{\" \"}\n        Views: {node.views}\n        {account && node.owner.screenName === account.screenName ? (\n          <p>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setEditTitle(node.title);\n                setEditContent(node.content);\n                setShowEditNode(true);\n              }}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => setShowConfirm(true)}\n            >\n              Delete\n            </Button>\n          </p>\n        ) : (\n          \"\"\n        )}\n      </p>\n      <h3>\n        Other options:\n        <p />\n        <OverlayTrigger\n          overlay={\n            !account ? (\n              <Tooltip id=\"tooltip-disabled\">You must be signed in!</Tooltip>\n            ) : (\n              <p />\n            )\n          }\n          style={{ width: \"100%\" }}\n        >\n          <span className=\"d-inline-block\" style={{ width: \"100%\" }}>\n            <Button\n              onClick={() => setShowSuggest(true)}\n              disabled={!account}\n              style={{\n                width: \"100%\",\n                pointerEvents: account ? \"auto\" : \"none\",\n              }}\n            >\n              Suggest New Choice\n            </Button>\n          </span>\n        </OverlayTrigger>\n      </h3>\n      <p />\n\n      <ChoiceColumns\n        owner={node.owner}\n        choices={node.nonCanonChoices}\n        account={account}\n        canon={false}\n        nodeID={node.ID}\n        onEdit={(choice) => {\n          setSuggestAction(choice.action);\n          setToPage(choice.to.ID);\n          setChoiceID(choice.ID);\n          setShowEditSuggest(true);\n        }}\n      />\n\n      {/******************************************\n                         MODALS \n        ******************************************/}\n\n      <Modal show={showEditSuggest} onHide={() => setShowEditSuggest(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Editing Choice</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Action:</Form.Label>\n            <Form.Control\n              required\n              value={suggestAction}\n              onChange={(e) => setSuggestAction(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Go to Page:</Form.Label>\n            <SearchPage\n              callback={(nodeID) => setToPage(nodeID)}\n              toID={toPage}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => editChoice(toPage)}>Edit Choice</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showSuggest} onHide={() => setShowSuggest(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Suggesting New Choice</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Action:</Form.Label>\n            <Form.Control\n              required\n              value={suggestAction}\n              onChange={(e) => setSuggestAction(e.target.value)}\n            />\n            <Form.Label>Go to Page:</Form.Label>\n            <SearchPage\n              callback={(nodeID) => setToPage(nodeID)}\n              toID={toPage}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => createNewAction(toPage)}>\n              Submit New Choice\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Creating New Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"3\"\n              required\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={createNode}>Create Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showEditNode} onHide={() => setShowEditNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={editTitle}\n              onChange={(e) => setEditTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"3\"\n              required\n              value={editContent}\n              onChange={(e) => setEditContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={editNode}>Edit Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Page</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n            No!\n          </Button>\n          <Button variant=\"primary\" onClick={deletePage}>\n            Yes!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {redirect ? redirect : \"\"}\n    </Container>\n  );\n};\n\nconst ChoiceColumns = (props) => {\n  const { owner, account, choices, nodeID, canon, onEdit } = props;\n\n  const like = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{likeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.likeSuggestion) window.location.reload(false);\n      });\n  };\n  const dislike = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{dislikeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.dislikeSuggestion)\n          window.location.reload(false);\n      });\n  };\n\n  const makeCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeCanon) window.location.reload(false);\n    });\n  };\n  const makeNonCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeNonCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeNonCanon) window.location.reload(false);\n    });\n  };\n\n  const removeSuggestion = (choiceID) => {\n    app_fetch({\n      query: `mutation{removeSuggestion(choiceID:\"${choiceID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) window.location.reload(false);\n    });\n  };\n\n  return (\n    <CardColumns>\n      {choices.map((choice) => (\n        <Card className=\"text-center\">\n          <a\n            href={choice.to ? `/crowdventure/#/node/${choice.to.ID}` : \"\"}\n            style={{\n              pointerEvents: choice.to ? \"auto\" : \"none\",\n              color: choice.to ? undefined : \"grey\",\n            }}\n            onClick={() => setTimeout(() => window.location.reload(false), 100)}\n          >\n            <Card.Body style={{ cursor: \"pointer\" }}>\n              <Card.Title>{choice.action}</Card.Title>\n            </Card.Body>\n          </a>\n          <DropdownButton\n            variant=\"light\"\n            style={{ position: \"absolute\", top: \"0px\", right: \"0px\" }}\n            size=\"sm\"\n            drop=\"right\"\n            title={<span class=\"fa\">&#xf013;</span>}\n          >\n            <Dropdown.Item\n              disabled={!account || account.screenName !== owner.screenName}\n              onClick={() =>\n                canon ? makeNonCanon(choice.ID) : makeCanon(choice.ID)\n              }\n            >\n              Make {canon ? \"Nonc\" : \"C\"}anon\n            </Dropdown.Item>\n            <Dropdown.Item\n              disabled={\n                !account ||\n                (account.screenName !== choice.suggestedBy.screenName &&\n                  account.screenName !== owner.screenName)\n              }\n              onClick={() => removeSuggestion(choice.ID)}\n            >\n              Delete\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => onEdit(choice)}\n              disabled={\n                !canon ||\n                !account ||\n                (account.screenName !== choice.suggestedBy.screenName &&\n                  account.screenName !== owner.screenName)\n              }\n            >\n              Edit\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item disabled>Report</Dropdown.Item>\n          </DropdownButton>\n          <Card.Footer>\n            <a\n              href={`/crowdventure/#/node/${nodeID}`}\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.dislikedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"red\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-down\"\n              onClick={() => dislike(choice.ID)}\n            ></a>\n            {\" \" + choice.score + \" \"}\n            <a\n              href={`/crowdventure/#/node/${nodeID}`}\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.likedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"green\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-up\"\n              onClick={() => like(choice.ID)}\n            ></a>\n            <br />\n            <small className=\"text-muted\">\n              Suggested By:{\" \"}\n              <a\n                href={`/crowdventure/#/account/${choice.suggestedBy.screenName}`}\n              >\n                {choice.suggestedBy.screenName}\n              </a>\n            </small>\n          </Card.Footer>\n        </Card>\n      ))}\n    </CardColumns>\n  );\n};\n\nconst SearchPage = (props) => {\n  const { callback, toID } = props;\n  const [allNodes, setAllNodes] = useState(undefined);\n  const [toNode, setToNode] = useState(undefined);\n\n  const filterByCallback = (node, props) => {\n    if (props.text === \"\") {\n      callback(\"\");\n      return true;\n    }\n    return (\n      node.title.toLowerCase().includes(props.text.toLowerCase()) ||\n      node.owner.screenName.toLowerCase().includes(props.text.toLowerCase())\n    );\n  };\n\n  useEffect(() => {\n    if (toID) {\n      app_fetch({\n        query: `query{getNode(ID:\"${toID}\"){title,ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getNode) setToNode(res.data.getNode);\n        else alert(\"Something went wrong when retrieving node\");\n      });\n    } else setToNode(null);\n\n    app_fetch({\n      query: `query{allNodes{title,owner{screenName},ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allNodes) setAllNodes(res.data.allNodes);\n      else alert(\"Something went wrong when retrieving all nodes\");\n    });\n  }, []);\n\n  if (!allNodes || toNode === undefined) return <div>Loading...</div>;\n\n  return (\n    <Typeahead\n      filterBy={filterByCallback}\n      defaultSelected={[toNode ? toNode.title : \"\"]}\n      labelKey=\"title\"\n      options={allNodes}\n      placeholder=\"(Leave Empty to Create New Page)\"\n      renderMenuItemChildren={(node) => (\n        <div onClick={() => callback(node.ID)}>\n          {node.title}\n          <div>\n            <small>Author: {node.owner.screenName}</small>\n          </div>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default Node;\n","import React, { useState, useEffect } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  Card,\n  CardColumns,\n  DropdownButton,\n  Dropdown,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { app_fetch, escape } from \"./index\";\n\nconst Account = (props) => {\n  const accountID = escape(props.match.params.id);\n  const loggedInAsID = escape(new Cookies().get(\"account\"));\n  const [redirect, setRedirect] = useState(undefined);\n  const [account, setAccount] = useState(undefined);\n  const [loggedInAs, setLoggedInAs] = useState(undefined);\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n\n  const [showEditPage, setShowEditPage] = useState(false);\n  const [bio, setBio] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const [showProfilePic, setShowProfilePic] = useState(false);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{getAccount(screenName:\"${accountID}\"){bio,screenName,suggestedChoices{action, from{title}, to{title}},totalNodeViews,totalSuggestionScore, nodes{featured,ID,title,views}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.getAccount);\n      else alert(\"Something went wrong when retrieving account\");\n    });\n\n    const cookies = new Cookies();\n\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${loggedInAsID}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setLoggedInAs(res.data.loginAccount);\n      else {\n        alert(\"Something went wrong when logging in account, logging out\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n  }, []);\n\n  const editPage = () => {\n    const esBio = escape(bio, true);\n    app_fetch({\n      query: `mutation{editAccount(screenName:\"${account.screenName}\",bio:\"\"\"${esBio}\"\"\"){bio,screenName,suggestedChoices{action, from{title}, to{title}},totalNodeViews,totalSuggestionScore, nodes{featured,ID,title,views}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.editAccount) {\n        setAccount(res.data.editAccount);\n        setShowEditPage(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when editing account\");\n    });\n  };\n\n  const createNode = () => {\n    const esTitle = escape(title);\n    const esContent = escape(content);\n    app_fetch({\n      query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${esTitle}\",content:\"${esContent}\",featured:true){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createNode) {\n        setShowCreateNode(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when creating node\");\n    });\n  };\n\n  const deleteAccount = () => {\n    new Cookies().set(\"account\", \"\", { path: \"/\" });\n\n    app_fetch({\n      query: `mutation{deleteAccount(screenName:\"${accountID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) {\n        setRedirect(<Redirect to=\"/\" />);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when deleting account\");\n    });\n  };\n\n  const featurePage = (node, alreadyFeatured) => {\n    app_fetch({\n      query: `mutation{editNode(nodeID:\"${\n        node.ID\n      }\", featured:${!alreadyFeatured}){title}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) window.location.reload(false);\n      else alert(\"Something went wrong when featuring page\");\n    });\n  };\n\n  if (account === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (account === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1 style={{ position: \"relative\", left: \"5px\" }}>\n        {account.screenName}\n      </h1>\n      {account.bio ? (\n        <Container>\n          {account.bio.split(\"\\n\").map((line) => (\n            <p>{line}</p>\n          ))}\n        </Container>\n      ) : (\n        \"\"\n      )}\n      <Container className=\"text-muted text-right\">\n        Total views: {account.totalNodeViews} Total score:{\" \"}\n        {account.totalSuggestionScore}\n      </Container>\n      <p />\n      <h3>Featured Pages:</h3>\n      <CardColumns>\n        {account.nodes.map((node) => (\n          <Card>\n            <a href={`/crowdventure/#/node/${node.ID}`}>\n              <Card.Body className=\"text-center\">\n                <Card.Title>{node.title}</Card.Title>\n              </Card.Body>\n            </a>\n            {node.featured ? (\n              <OverlayTrigger\n                overlay={\n                  <Tooltip>This page has been starred by this user!</Tooltip>\n                }\n              >\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: \"5px\",\n                    left: \"5px\",\n                    color: \"yellow\",\n                    \"-webkit-touch-callout\": \"none\",\n                    \"-webkit-user-select\": \"none\",\n                    \"-khtml-user-select\": \"none\",\n                    \"-moz-user-select\": \"none\",\n                    \"-ms-user-select\": \"none\",\n                    \"user-select\": \"none\",\n                    \"text-shadow\": \"0 0 1px black\",\n                  }}\n                  class=\"fa\"\n                >\n                  &#xf005;\n                </div>\n              </OverlayTrigger>\n            ) : (\n              \"\"\n            )}\n\n            <DropdownButton\n              variant=\"light\"\n              style={{ position: \"absolute\", top: \"0px\", right: \"0px\" }}\n              size=\"sm\"\n              drop=\"right\"\n              title={<span class=\"fa\">&#xf013;</span>}\n            >\n              <Dropdown.Item\n                onClick={() => featurePage(node, node.featured)}\n                disabled={\n                  !loggedInAs || loggedInAs.screenName !== account.screenName\n                }\n              >\n                {node.featured ? \"Un-f\" : \"F\"}eature page\n              </Dropdown.Item>\n              <Dropdown.Item disabled>Delete</Dropdown.Item>\n              <Dropdown.Item disabled>Make Private</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item disabled>Report</Dropdown.Item>\n            </DropdownButton>\n            <Card.Footer className=\"text-muted text-center\">\n              <small>\n                Created by: {account.screenName}\n                <br />\n                Views:{\" \" + node.views}\n              </small>\n            </Card.Footer>\n          </Card>\n        ))}\n      </CardColumns>\n      <p />\n      {loggedInAs && loggedInAs.screenName === account.screenName ? (\n        <Container>\n          <Button onClick={() => setShowCreateNode(true)}>\n            Create New Page\n          </Button>{\" \"}\n          <Button\n            variant=\"light\"\n            onClick={() => {\n              setBio(account.bio);\n              setShowEditPage(true);\n            }}\n          >\n            Edit Account\n          </Button>\n          <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Creating New Page</Modal.Title>\n            </Modal.Header>\n            <Form>\n              <Modal.Body>\n                <Form.Label>Title:</Form.Label>\n                <Form.Control\n                  required\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                ></Form.Control>\n                <Form.Label>Content:</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  required\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                ></Form.Control>\n                {info ? info : \"\"}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button onClick={createNode}>Create Page!</Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n          <Modal show={showEditPage} onHide={() => setShowEditPage(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Editing Account</Modal.Title>\n            </Modal.Header>\n            <Form>\n              <Modal.Body>\n                <Form.Label>Bio:</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  value={bio}\n                  onChange={(e) => setBio(e.target.value)}\n                ></Form.Control>\n                {info ? info : \"\"}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button onClick={editPage}>Edit Account</Button>\n                <Button\n                  href=\"/crowdventure\"\n                  onClick={() =>\n                    new Cookies().set(\"account\", \"\", { path: \"/\" })\n                  }\n                  variant=\"danger\"\n                >\n                  Log out\n                </Button>\n                <Button onClick={() => setShowConfirm(true)} variant=\"danger\">\n                  Delete Account\n                </Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n          <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Delete Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Are you sure?</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n                No!\n              </Button>\n              <Button variant=\"primary\" onClick={deleteAccount}>\n                Yes!\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </Container>\n      ) : (\n        \"\"\n      )}\n      {redirect ? redirect : \"\"}\n    </Container>\n  );\n};\n\nexport default Account;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Card,\n  CardColumns,\n  Form,\n  Button,\n  Modal,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport Cookies from \"universal-cookie\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { app_fetch, escape } from \"./index\";\n\nconst Home = () => {\n  const [topNodes, setTopNodes] = useState(undefined);\n  const [topAccounts, setTopAccounts] = useState(undefined);\n  const [allNodes, setAllNodes] = useState(undefined);\n  const [searchNodes, setSearchNodes] = useState(\"\");\n  const [searchNodesList, setSearchNodesList] = useState(undefined);\n  const [account, setAccount] = useState(false);\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n\n  const [redirect, setRedirect] = useState(undefined);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{featuredNodes{ID,title,owner{screenName},views}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.featuredNodes)\n        setTopNodes(res.data.featuredNodes);\n      else alert(\"Something went wrong when retrieving featured nodes\");\n    });\n\n    // app_fetch({\n    //   query: `query{allNodes{ID,title,owner{screenName},views}}`,\n    // }).then((res, err) => {\n    //   if (err) alert(err);\n    //   if (res.data && res.data.allNodes) setAllNodes(res.data.allNodes);\n    //   else alert(\"Something went wrong when retrieving nodes\");\n    // });\n\n    const cookies = new Cookies();\n    const loggedInAs = escape(cookies.get(\"account\"));\n\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.loginAccount);\n      else {\n        alert(\"Something went wrong when retrieving account, logging out\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n\n    // app_fetch({\n    //   query: `query{allAccounts{screenName,totalNodeViews,totalSuggestionScore}}`,\n    // }).then((res, err) => {\n    //   if (err) alert(err);\n    //   if (res.data && res.data.allAccounts)\n    //     setTopAccounts(res.data.allAccounts);\n    //   else alert(\"Something went wrong when retrieving accounts\");\n    // });\n  }, []);\n\n  const createNode = () => {\n    const esTitle = escape(title);\n    const esContent = escape(content);\n    app_fetch({\n      query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${esTitle}\",content:\"${esContent}\",featured:true){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createNode) {\n        setShowCreateNode(false);\n        setRedirect(<Redirect to={`/node/${res.data.createNode.ID}`} />);\n      } else alert(\"Something went wrong when creating node\");\n    });\n  };\n\n  return (\n    <Container>\n      <h1>Welcome!</h1>\n      <Container>\n        Crowdventure is a Crowd-Sourced\n        Choose-and-Create-Your-Own-Adventure-Game!\n      </Container>\n      <p />\n      <h3>Featured Pages:</h3>\n      {topNodes ? (\n        <CardColumns>\n          {topNodes.map((node) => (\n            <Card className=\"text-center\">\n              <a href={`/crowdventure/#/node/${node.ID}`}>\n                <Card.Body>\n                  <Card.Title>{node.title}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                <small className=\"text-muted\">\n                  Created by:{\" \"}\n                  <a href={`/crowdventure/#/account/${node.owner.screenName}`}>\n                    {node.owner.screenName}\n                  </a>\n                  <br />\n                  Views:{\" \" + node.views}\n                </small>\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )}\n      <OverlayTrigger\n        overlay={\n          !account ? (\n            <Tooltip id=\"tooltip-disabled\">You must be signed in!</Tooltip>\n          ) : (\n            <p />\n          )\n        }\n        style={{ width: \"100%\" }}\n      >\n        <span className=\"d-inline-block\" style={{ width: \"100%\" }}>\n          <Button\n            onClick={() => setShowCreateNode(true)}\n            disabled={!account}\n            style={{\n              width: \"100%\",\n              pointerEvents: account ? \"auto\" : \"none\",\n            }}\n          >\n            Create New!\n          </Button>\n        </span>\n      </OverlayTrigger>\n      {/* <h3>Featured Accounts:</h3>\n      {topAccounts ? (\n        <CardColumns>\n          {topAccounts.map((account) => (\n            <Card>\n              <a href={`/crowdventure/#/account/${account.screenName}`}>\n                <Card.Body>\n                  <Card.Title>{account.screenName}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                Total Views:{account.totalNodeViews}\n                <br />\n                Total Score:{account.totalSuggestionScore}\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )} */}\n      <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Creating New Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"3\"\n              required\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={createNode}>Create Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n      {redirect ? redirect : \"\"}\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport Node from \"./Node\";\nimport Account from \"./Account\";\nimport Home from \"./Home\";\n\nimport Cookies from \"universal-cookie\";\nimport { Navbar, Container, Button, Modal, Form } from \"react-bootstrap\";\n\nimport { app_fetch, escape } from \"./index\";\n\nimport history from \"history/browser\";\n\nconst App = () => {\n  return (\n    <Container>\n      <Navbar expand=\"lg\">\n        <Navbar.Brand href=\"/crowdventure\">\n          <img\n            href=\"/crowdventure\"\n            src={process.env.PUBLIC_URL + \"/logo.png\"}\n            alt=\"Crowdventure Logo\"\n            style={{ width: \"100%\" }}\n          />\n        </Navbar.Brand>\n        <small class=\"text-muted\">Version: 0.1.3</small>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"bg-light\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n          <AccountManager />\n        </Navbar.Collapse>\n      </Navbar>\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route\n            path=\"/node/:id\"\n            render={(props) => <Node {...props} history={history} />}\n          />\n          <Route path=\"/account/:id\" component={Account} />\n        </Switch>\n      </HashRouter>\n      <Navbar className=\"text-right\">\n        <small class=\"text-muted\">@ 2020 Copyright: (MIT) Benjamin Kern</small>\n      </Navbar>\n    </Container>\n  );\n};\n\nconst AccountManager = () => {\n  const [showLogin, setShowLogin] = useState(false);\n  const [showSignUp, setShowSignUp] = useState(false);\n  const [account, setAccount] = useState(undefined);\n  const [info, setInfo] = useState(undefined);\n\n  const [screenName, setScreenName] = useState(\"\");\n  const [pass1, setPass1] = useState(\"\");\n  const [pass2, setPass2] = useState(\"\");\n\n  const handleSubmitSignUp = () => {\n    if (pass1 !== pass2)\n      setInfo(<div style={{ color: \"red\" }}>Passwords must match!</div>);\n    else {\n      const esScreenName = escape(screenName);\n      app_fetch({\n        query: `query{getAccount(screenName:\"${esScreenName}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getAccount)\n          setInfo(\n            <div style={{ color: \"red\" }}>That account already exists!</div>\n          );\n        else {\n          createAccount();\n        }\n      });\n    }\n  };\n\n  const createAccount = () => {\n    const esScreenName = escape(screenName);\n    const esPass = escape(pass1);\n    app_fetch({\n      query: `mutation{createAccount(screenName:\"${esScreenName}\",password:\"${esPass}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createAccount) {\n        new Cookies().set(\"account\", screenName, { path: \"/\" });\n        setAccount(res.data.createAccount);\n        setShowSignUp(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when creating account\");\n    });\n  };\n\n  const login = () => {\n    const esScreenName = escape(screenName);\n    const esPass = escape(pass1);\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${esScreenName}\",password:\"${esPass}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.loginAccount) {\n        new Cookies().set(\"account\", screenName, { path: \"/\" });\n        setAccount(res.data.getAccount);\n        setShowLogin(false);\n        window.location.reload(false);\n      } else\n        setInfo(\n          <div style={{ color: \"red\" }}>\n            That account does not exist or the password did not match!\n          </div>\n        );\n    });\n  };\n\n  useEffect(() => {\n    let loggedInAs = escape(new Cookies().get(\"account\"));\n    if (loggedInAs)\n      app_fetch({\n        query: `mutation{loginAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) setAccount(res.data.loginAccount);\n        else {\n          alert(\"Something went wrong when logging in\");\n          new Cookies().set(\"account\", \"\", { path: \"/\" });\n        }\n      });\n  }, []);\n\n  if (account === undefined || account === null) {\n    return (\n      <Navbar.Text>\n        You are not logged in.{\" \"}\n        <Button variant=\"light\" onClick={() => setShowLogin(true)} size=\"sm\">\n          Log In\n        </Button>{\" \"}\n        or{\" \"}\n        <Button variant=\"light\" onClick={() => setShowSignUp(true)} size=\"sm\">\n          Sign Up\n        </Button>\n        <Modal show={showLogin} onHide={() => setShowLogin(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Log in</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Label>Screen Name:</Form.Label>\n              <Form.Control\n                required\n                value={screenName}\n                onChange={(e) => setScreenName(e.target.value)}\n              />\n              <Form.Label>Password:</Form.Label>\n              <Form.Control\n                required\n                type=\"password\"\n                value={pass1}\n                onChange={(e) => setPass1(e.target.value)}\n              />\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => login()}>\n                Log in\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n        <Modal show={showSignUp} onHide={() => setShowSignUp(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Sign Up for Crowdventure!</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Group>\n                <Form.Label>Screen Name:</Form.Label>\n                <Form.Control\n                  required\n                  value={screenName}\n                  onChange={(e) => setScreenName(e.target.value)}\n                />\n                <Form.Label>Create Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass1}\n                  onChange={(e) => setPass1(e.target.value)}\n                />\n                <Form.Label>Confirm Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass2}\n                  onChange={(e) => setPass2(e.target.value)}\n                />\n              </Form.Group>\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => handleSubmitSignUp()}>\n                Sign Up\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n      </Navbar.Text>\n    );\n  }\n\n  return (\n    <Navbar.Text>\n      You are logged in as:{\" \"}\n      <a\n        href={`/crowdventure/#/account/${account.screenName}`}\n        onClick={() => setTimeout(() => window.location.reload(false), 100)}\n      >\n        {account.screenName}\n      </a>\n    </Navbar.Text>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst { createApolloFetch } = require(\"apollo-fetch\");\n\nconst app_fetch = createApolloFetch({\n  uri: require(\"./apolloURL.js\"),\n});\n\nconst escape = (text, newlines = false) =>\n  newlines\n    ? text.replace(/\"\"\"/g, ` \"\" \" `)\n    : text.replace(/\\n/g, \"\").replace(/\\\\/g, `\\\\\\\\`).replace(/\"/g, `\\\\\"`);\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport { app_fetch, escape };\n"],"sourceRoot":""}