{"version":3,"sources":["apolloURL.js","Node.jsx","Account.jsx","Home.jsx","App.jsx","index.jsx"],"names":["module","exports","ChoiceColumns","props","owner","account","choices","nodeID","canon","onEdit","CardColumns","map","choice","Card","className","href","to","ID","style","pointerEvents","color","undefined","onClick","setTimeout","window","location","reload","Body","cursor","Title","action","DropdownButton","variant","position","top","right","size","drop","title","class","Dropdown","Item","disabled","screenName","choiceID","app_fetch","query","then","res","err","alert","data","makeNonCanon","makeCanon","suggestedBy","Divider","Footer","dislikedBy","includes","dislikeSuggestion","score","likedBy","likeSuggestion","SearchPage","callback","toID","useState","allNodes","setAllNodes","toNode","setToNode","useEffect","getNode","filterBy","node","text","toLowerCase","defaultSelected","labelKey","options","placeholder","renderMenuItemChildren","Node","redirect","setRedirect","match","params","id","setAccount","setNode","info","setInfo","showSuggest","setShowSuggest","suggestAction","setSuggestAction","toPage","setToPage","showCreateNode","setShowCreateNode","setTitle","content","setContent","createNodeCallback","setCreateNodeCallback","showEditNode","setShowEditNode","editTitle","setEditTitle","editContent","setEditContent","showConfirm","setShowConfirm","showEditSuggest","setShowEditSuggest","setChoiceID","cookies","Cookies","loggedInAs","get","loginAccount","set","path","Alert","Heading","Container","canonChoices","length","Button","OverlayTrigger","overlay","Tooltip","width","nonCanonChoices","Modal","show","onHide","Header","closeButton","Form","Label","Control","required","value","onChange","e","target","editChoice","createNewAction","as","rows","createNode","editNode","Account","accountID","setLoggedInAs","showEditPage","setShowEditPage","bio","setBio","getAccount","left","totalNodeViews","totalSuggestionScore","nodes","views","editAccount","Home","topNodes","setTopNodes","setTopAccounts","allAccounts","AccountManager","showLogin","setShowLogin","showSignUp","setShowSignUp","setScreenName","pass1","setPass1","pass2","setPass2","createAccount","Navbar","Text","type","Group","App","expand","Brand","src","process","alt","Toggle","aria-controls","Collapse","component","exact","createApolloFetch","require","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.908a9ae7.chunk.js","sourcesContent":["module.exports =\n    \"https://3yfp7ejc0m.execute-api.us-east-1.amazonaws.com/dev/graphql\";","import React, { useState, useEffect, useRef } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  Card,\n  CardColumns,\n  DropdownButton,\n  Dropdown,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport app_fetch from \"./index\";\n\nconst Node = (props) => {\n  const [redirect, setRedirect] = useState(undefined);\n  const nodeID = props.match.params.id;\n  const [account, setAccount] = useState(undefined);\n  const [node, setNode] = useState(undefined);\n\n  const [info, setInfo] = useState(\"\");\n\n  const [showSuggest, setShowSuggest] = useState(false);\n  const [suggestAction, setSuggestAction] = useState(\"\");\n  const [toPage, setToPage] = useState(\"\");\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [createNodeCallback, setCreateNodeCallback] = useState(undefined);\n\n  const [showEditNode, setShowEditNode] = useState(false);\n  const [editTitle, setEditTitle] = useState(\"\");\n  const [editContent, setEditContent] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const [showEditSuggest, setShowEditSuggest] = useState(false);\n  const [choiceID, setChoiceID] = useState(\"\");\n\n  const createNode = () => {\n    if (title.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (content.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${title}\",content:\"${content}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.createNode) {\n          createNodeCallback[0](res.data.createNode.ID);\n        } else alert(\"Something went wrong when creating node\");\n      });\n  };\n\n  const editNode = () => {\n    if (editTitle.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (editContent.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{editNode(nodeID:\"${nodeID}\",title:\"${editTitle}\",content:\"${editContent}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.editNode) {\n          setShowEditNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when editing node\");\n      });\n  };\n\n  const createNewAction = (toID) => {\n    if (!toID) {\n      setShowSuggest(false);\n      setShowCreateNode(true);\n      setCreateNodeCallback([createNewAction]);\n    } else\n      app_fetch({\n        query: `mutation{suggestChoice(accountScreenName:\"${account.screenName}\",fromID:\"${nodeID}\",action:\"${suggestAction}\",toID:\"${toID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) {\n          setShowSuggest(false);\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when creating choice!\");\n      });\n  };\n\n  const deletePage = () => {\n    app_fetch({\n      query: `mutation{deleteNode(nodeID:\"${nodeID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setRedirect(<Redirect to=\"/\" />);\n      else alert(\"Something went wrong when deleting node\");\n    });\n  };\n\n  const editChoice = (toID) => {\n    if (!toID) {\n      setShowEditSuggest(false);\n      setShowCreateNode(true);\n      setCreateNodeCallback([editChoice]);\n    } else {\n      app_fetch({\n        query: `mutation{editSuggestion(choiceID:\"${choiceID}\",action:\"${suggestAction}\",toID:\"${toID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) {\n          setShowEditSuggest(false);\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when editing choice!\");\n      });\n    }\n  };\n\n  useEffect(() => {\n    const cookies = new Cookies();\n    const loggedInAs = cookies.get(\"account\");\n\n    app_fetch({\n      query: `query{getNode(ID:\"${nodeID}\"){ID,title,content,views,owner{screenName},canonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}},nonCanonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setNode(res.data.getNode);\n      else setNode(null);\n    });\n\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.loginAccount);\n      else {\n        alert(\"Something went wrong when retrieving account\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n  }, []);\n\n  if (node === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (node === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1>{node.title}</h1>\n      <Container>{node.content}</Container>\n      <p />\n      {node.canonChoices.length ? (\n        <ChoiceColumns\n          owner={node.owner}\n          choices={node.canonChoices}\n          account={account}\n          canon={true}\n          nodeID={node.ID}\n          onEdit={(choice) => {\n            setSuggestAction(choice.action);\n            setToPage(choice.to.ID);\n            setChoiceID(choice.ID);\n            setShowEditSuggest(true);\n          }}\n        />\n      ) : (\n        <p className=\"text-muted\">\n          By decree of <strong>{node.owner.screenName}</strong>, this journey\n          ends here.\n        </p>\n      )}\n      <p />\n\n      <p>\n        Owner:{\" \"}\n        <a href={`/crowdventure/#/account/${node.owner.screenName}`}>\n          {node.owner.screenName}\n        </a>\n        {account && node.owner.screenName === account.screenName ? (\n          <p>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setEditTitle(node.title);\n                setEditContent(node.content);\n                setShowEditNode(true);\n              }}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => setShowConfirm(true)}\n            >\n              Delete\n            </Button>\n          </p>\n        ) : (\n          \"\"\n        )}\n      </p>\n      <h3>\n        Other options:\n        <p />\n        <OverlayTrigger\n          overlay={\n            !account ? (\n              <Tooltip id=\"tooltip-disabled\">You must be signed in!</Tooltip>\n            ) : (\n              <p />\n            )\n          }\n          style={{ width: \"100%\" }}\n        >\n          <span className=\"d-inline-block\" style={{ width: \"100%\" }}>\n            <Button\n              onClick={() => setShowSuggest(true)}\n              disabled={!account}\n              style={{\n                width: \"100%\",\n                pointerEvents: account ? \"auto\" : \"none\",\n              }}\n            >\n              Suggest New Choice\n            </Button>\n          </span>\n        </OverlayTrigger>\n      </h3>\n      <p />\n\n      <ChoiceColumns\n        owner={node.owner}\n        choices={node.nonCanonChoices}\n        account={account}\n        canon={false}\n        nodeID={node.ID}\n        onEdit={(choice) => {\n          setSuggestAction(choice.action);\n          setToPage(choice.to.ID);\n          setChoiceID(choice.ID);\n          setShowEditSuggest(true);\n        }}\n      />\n\n      {/******************************************\n                         MODALS \n        ******************************************/}\n\n      <Modal show={showEditSuggest} onHide={() => setShowEditSuggest(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Editing Choice</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Action:</Form.Label>\n            <Form.Control\n              required\n              value={suggestAction}\n              onChange={(e) => setSuggestAction(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Go to Page:</Form.Label>\n            <SearchPage\n              callback={(nodeID) => setToPage(nodeID)}\n              toID={toPage}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => editChoice(toPage)}>Edit Choice</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showSuggest} onHide={() => setShowSuggest(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Suggesting New Choice</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Action:</Form.Label>\n            <Form.Control\n              required\n              value={suggestAction}\n              onChange={(e) => setSuggestAction(e.target.value)}\n            />\n            <Form.Label>Go to Page:</Form.Label>\n            <SearchPage\n              callback={(nodeID) => setToPage(nodeID)}\n              toID={toPage}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => createNewAction(toPage)}>\n              Submit New Choice\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Creating New Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"3\"\n              required\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={createNode}>Create Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showEditNode} onHide={() => setShowEditNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows=\"3\"\n              required\n              value={editTitle}\n              onChange={(e) => setEditTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              required\n              value={editContent}\n              onChange={(e) => setEditContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={editNode}>Edit Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Page</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n            No!\n          </Button>\n          <Button variant=\"primary\" onClick={deletePage}>\n            Yes!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {redirect ? redirect : \"\"}\n    </Container>\n  );\n};\n\nconst ChoiceColumns = (props) => {\n  const { owner, account, choices, nodeID, canon, onEdit } = props;\n\n  const like = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{likeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.likeSuggestion) window.location.reload(false);\n      });\n  };\n  const dislike = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{dislikeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.dislikeSuggestion)\n          window.location.reload(false);\n      });\n  };\n\n  const makeCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeCanon) window.location.reload(false);\n    });\n  };\n  const makeNonCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeNonCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeNonCanon) window.location.reload(false);\n    });\n  };\n\n  const removeSuggestion = (choiceID) => {\n    app_fetch({\n      query: `mutation{removeSuggestion(choiceID:\"${choiceID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) window.location.reload(false);\n    });\n  };\n\n  return (\n    <CardColumns>\n      {choices.map((choice) => (\n        <Card className=\"text-center\">\n          <a\n            href={choice.to ? `/crowdventure/#/node/${choice.to.ID}` : \"\"}\n            style={{\n              pointerEvents: choice.to ? \"auto\" : \"none\",\n              color: choice.to ? undefined : \"grey\",\n            }}\n            onClick={() => setTimeout(() => window.location.reload(false), 100)}\n          >\n            <Card.Body style={{ cursor: \"pointer\" }}>\n              <Card.Title>{choice.action}</Card.Title>\n            </Card.Body>\n          </a>\n          <DropdownButton\n            variant=\"light\"\n            style={{ position: \"absolute\", top: \"0px\", right: \"0px\" }}\n            size=\"sm\"\n            drop=\"right\"\n            title={<span class=\"fa\">&#xf013;</span>}\n          >\n            <Dropdown.Item\n              disabled={!account || account.screenName !== owner.screenName}\n              onClick={() =>\n                canon ? makeNonCanon(choice.ID) : makeCanon(choice.ID)\n              }\n            >\n              Make {canon ? \"Nonc\" : \"C\"}anon\n            </Dropdown.Item>\n            <Dropdown.Item\n              disabled={\n                !account ||\n                (account.screenName !== choice.suggestedBy.screenName &&\n                  account.screenName !== owner.screenName)\n              }\n              onClick={() => removeSuggestion(choice.ID)}\n            >\n              Delete\n            </Dropdown.Item>\n            <Dropdown.Item\n              onClick={() => onEdit(choice)}\n              disabled={\n                !account || choice.suggestedBy.screenName !== account.screenName\n              }\n            >\n              Edit\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item>Report</Dropdown.Item>\n          </DropdownButton>\n          <Card.Footer>\n            <a\n              href={`/crowdventure/#/node/${nodeID}`}\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.dislikedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"red\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-down\"\n              onClick={() => dislike(choice.ID)}\n            ></a>\n            {\" \" + choice.score + \" \"}\n            <a\n              href={`/crowdventure/#/node/${nodeID}`}\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.likedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"green\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-up\"\n              onClick={() => like(choice.ID)}\n            ></a>\n            <br />\n            <small className=\"text-muted\">\n              Suggested By:{\" \"}\n              <a\n                href={`/crowdventure/#/account/${choice.suggestedBy.screenName}`}\n              >\n                {choice.suggestedBy.screenName}\n              </a>\n            </small>\n          </Card.Footer>\n        </Card>\n      ))}\n    </CardColumns>\n  );\n};\n\nconst SearchPage = (props) => {\n  const { callback, toID } = props;\n  const [allNodes, setAllNodes] = useState(undefined);\n  const [toNode, setToNode] = useState(undefined);\n\n  const filterByCallback = (node, props) => {\n    if (props.text === \"\") {\n      callback(\"\");\n      return true;\n    }\n    return (\n      node.title.toLowerCase().includes(props.text) ||\n      node.owner.screenName.toLowerCase().includes(props.text)\n    );\n  };\n\n  useEffect(() => {\n    if (toID) {\n      app_fetch({\n        query: `query{getNode(ID:\"${toID}\"){title,ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getNode) setToNode(res.data.getNode);\n        else alert(\"Something went wrong when retrieving node\");\n      });\n    } else setToNode(null);\n\n    app_fetch({\n      query: `query{allNodes{title,owner{screenName},ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allNodes) setAllNodes(res.data.allNodes);\n      else alert(\"Something went wrong when retrieving all nodes\");\n    });\n  }, []);\n\n  if (!allNodes || toNode === undefined) return <div>Loading...</div>;\n\n  return (\n    <Typeahead\n      filterBy={filterByCallback}\n      defaultSelected={[toNode ? toNode.title : \"\"]}\n      labelKey=\"title\"\n      options={allNodes}\n      placeholder=\"(Leave Empty to Create New Page)\"\n      renderMenuItemChildren={(node) => (\n        <div onClick={() => callback(node.ID)}>\n          {node.title}\n          <div>\n            <small>Author: {node.owner.screenName}</small>\n          </div>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default Node;\n","import React, { useState, useEffect } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nimport app_fetch from \"./index\";\n\nconst Account = (props) => {\n  const accountID = props.match.params.id;\n  const [redirect, setRedirect] = useState(undefined);\n  const [account, setAccount] = useState(undefined);\n  const [loggedInAs, setLoggedInAs] = useState(undefined);\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n\n  const [showEditPage, setShowEditPage] = useState(false);\n  const [bio, setBio] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const [showProfilePic, setShowProfilePic] = useState(false);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{getAccount(screenName:\"${accountID}\"){bio,screenName,nodes{title,views},suggestedChoices{action, from{title}, to{title}},totalNodeViews,totalSuggestionScore, nodes{ID,title,views}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.getAccount);\n      else alert(\"Something went wrong when retrieving account\");\n    });\n\n    const cookies = new Cookies();\n\n    app_fetch({\n      query: `mutation{loginAccount(screenName:\"${cookies.get(\n        \"account\"\n      )}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setLoggedInAs(res.data.loginAccount);\n      else {\n        alert(\"Something went wrong when logging in account\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n  }, []);\n\n  const editPage = () => {\n    if (bio.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          Your bio cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else {\n      app_fetch({\n        query: `mutation{editAccount(screenName:\"${account.screenName}\",bio:\"${bio}\"){bio,screenName,nodes{title,views},suggestedChoices{action, from{title}, to{title}},totalNodeViews,totalSuggestionScore, nodes{ID,title,views}}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.editAccount) {\n          setAccount(res.data.editAccount);\n          setShowEditPage(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when editing account\");\n      });\n    }\n  };\n\n  const createNode = () => {\n    if (title.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (content.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${title}\",content:\"${content}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.createNode) {\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when creating node\");\n      });\n  };\n\n  const deleteAccount = () => {\n    new Cookies().set(\"account\", \"\", { path: \"/\" });\n    app_fetch({\n      query: `mutation{deleteAccount(screenName:\"${accountID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) {\n        setRedirect(<Redirect to=\"/\" />);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when deleting account\");\n    });\n  };\n\n  if (account === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (account === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1 style={{ position: \"relative\", left: \"5px\" }}>\n        {account.screenName}\n      </h1>\n      <Container className=\"text-muted text-right\">\n        Total views: {account.totalNodeViews} Total score:{\" \"}\n        {account.totalSuggestionScore}\n      </Container>\n      {account.bio ? <Container>{account.bio}</Container> : \"\"}\n      <p />\n      <h3>Featured Pages:</h3>\n      <CardColumns>\n        {account.nodes.map((node) => (\n          <Card>\n            <a href={`/crowdventure/#/node/${node.ID}`}>\n              <Card.Body>\n                <Card.Title>{node.title}</Card.Title>\n              </Card.Body>\n            </a>\n            <Card.Footer>\n              Created by: {account.screenName}\n              <br />\n              Views:{\" \" + node.views}\n            </Card.Footer>\n          </Card>\n        ))}\n      </CardColumns>\n      <p />\n      {loggedInAs && loggedInAs.screenName === account.screenName ? (\n        <Container>\n          <Button onClick={() => setShowCreateNode(true)}>\n            Create new Page\n          </Button>{\" \"}\n          <Button\n            variant=\"light\"\n            onClick={() => {\n              setBio(account.bio);\n              setShowEditPage(true);\n            }}\n          >\n            Edit Account\n          </Button>\n          <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Creating New Page</Modal.Title>\n            </Modal.Header>\n            <Form>\n              <Modal.Body>\n                <Form.Label>Title:</Form.Label>\n                <Form.Control\n                  required\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                ></Form.Control>\n                <Form.Label>Content:</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  required\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                ></Form.Control>\n                {info ? info : \"\"}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button onClick={createNode}>Create Page!</Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n          <Modal show={showEditPage} onHide={() => setShowEditPage(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Editing Account</Modal.Title>\n            </Modal.Header>\n            <Form>\n              <Modal.Body>\n                <Form.Label>Bio:</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  value={bio}\n                  onChange={(e) => setBio(e.target.value)}\n                ></Form.Control>\n                {info ? info : \"\"}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button onClick={editPage}>Edit Account</Button>\n                <Button\n                  href=\"/crowdventure\"\n                  onClick={() =>\n                    new Cookies().set(\"account\", \"\", { path: \"/\" })\n                  }\n                  variant=\"danger\"\n                >\n                  Log out\n                </Button>\n                <Button onClick={() => setShowConfirm(true)} variant=\"danger\">\n                  Delete Account\n                </Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n          <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Delete Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Are you sure?</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n                No!\n              </Button>\n              <Button variant=\"primary\" onClick={deleteAccount}>\n                Yes!\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </Container>\n      ) : (\n        \"\"\n      )}\n      {redirect ? redirect : \"\"}\n    </Container>\n  );\n};\n\nexport default Account;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Card, CardColumns } from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst Home = () => {\n  const [topNodes, setTopNodes] = useState(undefined);\n  const [topAccounts, setTopAccounts] = useState(undefined);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{allNodes{ID,title,owner{screenName},views}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allNodes) setTopNodes(res.data.allNodes);\n      else alert(\"Something went wrong when retrieving featured nodes\");\n    });\n\n    app_fetch({\n      query: `query{allAccounts{screenName,totalNodeViews,totalSuggestionScore}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allAccounts)\n        setTopAccounts(res.data.allAccounts);\n      else alert(\"Something went wrong when retrieving accounts\");\n    });\n  }, []);\n  return (\n    <Container>\n      <h1>Welcome!</h1>\n      <Container>\n        Crowdventure is a Crowd-Sourced\n        Choose-and-Create-Your-Own-Adventure-Game!\n      </Container>\n      <p />\n      <h3>Featured Pages:</h3>\n      {topNodes ? (\n        <CardColumns>\n          {topNodes.map((node) => (\n            <Card>\n              <a href={`/crowdventure/#/node/${node.ID}`}>\n                <Card.Body>\n                  <Card.Title>{node.title}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                Created by:{\" \"}\n                <a href={`/crowdventure/#/account/${node.owner.screenName}`}>\n                  {node.owner.screenName}\n                </a>\n                <br />\n                Views:{\" \" + node.views}\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )}\n      {/* <h3>Featured Accounts:</h3>\n      {topAccounts ? (\n        <CardColumns>\n          {topAccounts.map((account) => (\n            <Card>\n              <a href={`/crowdventure/#/account/${account.screenName}`}>\n                <Card.Body>\n                  <Card.Title>{account.screenName}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                Total Views:{account.totalNodeViews}\n                <br />\n                Total Score:{account.totalSuggestionScore}\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )} */}\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport Node from \"./Node\";\nimport Account from \"./Account\";\nimport Home from \"./Home\";\n\nimport Cookies from \"universal-cookie\";\nimport { Navbar, Container, Button, Modal, Form } from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst App = () => {\n  return (\n    <Container>\n      <Navbar expand=\"lg\">\n        <Navbar.Brand href=\"/crowdventure\">\n          <img\n            href=\"/crowdventure\"\n            src={process.env.PUBLIC_URL + \"/logo.png\"}\n            alt=\"Crowdventure Logo\"\n            style={{ width: \"100%\" }}\n          />\n        </Navbar.Brand>\n        <small class=\"text-muted\">Version: 0.1.2</small>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"bg-light\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n          <AccountManager />\n        </Navbar.Collapse>\n      </Navbar>\n      <HashRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/node/:id\" component={Node} />\n          <Route path=\"/account/:id\" component={Account} />\n        </Switch>\n      </HashRouter>\n      <Navbar className=\"text-right\">\n        <small class=\"text-muted\">@ 2020 Copyright: (MIT) Benjamin Kern</small>\n      </Navbar>\n    </Container>\n  );\n};\n\nconst AccountManager = () => {\n  const [showLogin, setShowLogin] = useState(false);\n  const [showSignUp, setShowSignUp] = useState(false);\n  const [account, setAccount] = useState(undefined);\n  const [info, setInfo] = useState(undefined);\n\n  const [screenName, setScreenName] = useState(\"\");\n  const [pass1, setPass1] = useState(\"\");\n  const [pass2, setPass2] = useState(\"\");\n\n  const handleSubmitSignUp = () => {\n    if (pass1 !== pass2)\n      setInfo(<div style={{ color: \"red\" }}>Passwords must match!</div>);\n    else if (screenName.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Screen Name cannot include (\") character!\n        </div>\n      );\n    else if (pass1.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Password cannot include (\") character!\n        </div>\n      );\n    else\n      app_fetch({\n        query: `query{getAccount(screenName:\"${screenName}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getAccount)\n          setInfo(\n            <div style={{ color: \"red\" }}>That account already exists!</div>\n          );\n        else {\n          createAccount();\n        }\n      });\n  };\n\n  const createAccount = () =>\n    app_fetch({\n      query: `mutation{createAccount(screenName:\"${screenName}\",password:\"${pass1}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createAccount) {\n        new Cookies().set(\"account\", screenName, { path: \"/\" });\n        setAccount(res.data.createAccount);\n        setShowSignUp(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when creating account\");\n    });\n\n  const login = () => {\n    if (screenName.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Screen Name cannot include (\") character!\n        </div>\n      );\n    else if (pass1.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Password cannot include (\") character!\n        </div>\n      );\n    else {\n      app_fetch({\n        query: `mutation{loginAccount(screenName:\"${screenName}\",password:\"${pass1}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.loginAccount) {\n          new Cookies().set(\"account\", screenName, { path: \"/\" });\n          setAccount(res.data.getAccount);\n          setShowLogin(false);\n          window.location.reload(false);\n        } else\n          setInfo(\n            <div style={{ color: \"red\" }}>\n              That account does not exist or the password did not match!\n            </div>\n          );\n      });\n    }\n  };\n\n  useEffect(() => {\n    let loggedInAs = new Cookies().get(\"account\"); // INSECURE DOES NOT CHECK FOR PASSWORD WHEN YOU LOAD PAGE BUT WAHTEVER\n    if (loggedInAs)\n      app_fetch({\n        query: `mutation{loginAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) setAccount(res.data.loginAccount);\n        else {\n          alert(\"Something went wrong when logging in\");\n          new Cookies().set(\"account\", \"\", { path: \"/\" });\n        }\n      });\n  }, []);\n\n  if (account === undefined || account === null) {\n    return (\n      <Navbar.Text>\n        You are not logged in.{\" \"}\n        <Button variant=\"light\" onClick={() => setShowLogin(true)} size=\"sm\">\n          Log In\n        </Button>{\" \"}\n        or{\" \"}\n        <Button variant=\"light\" onClick={() => setShowSignUp(true)} size=\"sm\">\n          Sign Up\n        </Button>\n        <Modal show={showLogin} onHide={() => setShowLogin(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Log in</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Label>Screen Name:</Form.Label>\n              <Form.Control\n                required\n                value={screenName}\n                onChange={(e) => setScreenName(e.target.value)}\n              />\n              <Form.Label>Password:</Form.Label>\n              <Form.Control\n                required\n                type=\"password\"\n                value={pass1}\n                onChange={(e) => setPass1(e.target.value)}\n              />\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => login()}>\n                Log in\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n        <Modal show={showSignUp} onHide={() => setShowSignUp(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Sign Up for Crowdventure!</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Group>\n                <Form.Label>Screen Name:</Form.Label>\n                <Form.Control\n                  required\n                  value={screenName}\n                  onChange={(e) => setScreenName(e.target.value)}\n                />\n                <Form.Label>Create Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass1}\n                  onChange={(e) => setPass1(e.target.value)}\n                />\n                <Form.Label>Confirm Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass2}\n                  onChange={(e) => setPass2(e.target.value)}\n                />\n              </Form.Group>\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => handleSubmitSignUp()}>\n                Sign Up\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n      </Navbar.Text>\n    );\n  }\n\n  return (\n    <Navbar.Text>\n      You are logged in as:{\" \"}\n      <a\n        href={`/crowdventure/#/account/${account.screenName}`}\n        onClick={() => setTimeout(() => window.location.reload(false), 100)}\n      >\n        {account.screenName}\n      </a>\n    </Navbar.Text>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst { createApolloFetch } = require(\"apollo-fetch\");\n\nconst app_fetch = createApolloFetch({\n  uri: require(\"./apolloURL.js\"),\n});\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default app_fetch;\n"],"sourceRoot":""}