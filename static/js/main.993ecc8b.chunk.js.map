{"version":3,"sources":["Node.jsx","Account.jsx","Home.jsx","App.jsx","index.jsx"],"names":["ChoiceColumns","props","owner","account","choices","canon","CardColumns","map","choice","Card","className","href","to","ID","style","pointerEvents","color","undefined","Body","cursor","Title","action","DropdownButton","variant","position","top","right","size","drop","title","class","Dropdown","Item","disabled","screenName","onClick","choiceID","app_fetch","query","then","res","err","alert","data","makeNonCanon","window","location","reload","makeCanon","suggestedBy","Divider","Footer","dislikedBy","includes","dislikeSuggestion","score","likedBy","Node","cookies","Cookies","useState","setAccount","node","setNode","info","setInfo","showSuggest","setShowSuggest","suggestAction","setSuggestAction","toPage","setToPage","showCreateNode","setShowCreateNode","setTitle","content","setContent","showEditNode","setShowEditNode","editTitle","setEditTitle","editContent","setEditContent","showConfirm","setShowConfirm","createNewAction","toID","match","params","id","suggestChoice","useEffect","loggedInAs","get","getNode","getAccount","set","path","Alert","Heading","Container","canonChoices","length","Button","nonCanonChoices","Modal","show","onHide","Header","closeButton","Form","Label","Control","required","value","onChange","e","target","placeholder","createNode","onSubmit","editNode","type","Account","left","bio","nodes","views","Home","topNodes","setTopNodes","topAccounts","setTopAccounts","allNodes","allAccounts","slice","totalNodeViews","totalSuggestionScore","AccountManager","showLogin","setShowLogin","showSignUp","setShowSignUp","setScreenName","pass1","setPass1","pass2","setPass2","createAccount","Navbar","Text","Group","App","Brand","src","process","alt","Collapse","component","exact","createApolloFetch","require","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.993ecc8b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Navbar,\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  Card,\n  CardColumns,\n  OverlayTrigger,\n  Tooltip,\n  CardDeck,\n  DropdownButton,\n  Dropdown,\n} from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst Node = (props) => {\n  const cookies = new Cookies();\n  const [account, setAccount] = useState(undefined);\n  const [node, setNode] = useState(undefined);\n\n  const [info, setInfo] = useState(\"\");\n\n  const [showSuggest, setShowSuggest] = useState(false);\n  const [suggestAction, setSuggestAction] = useState(\"\");\n  const [toPage, setToPage] = useState(\"\");\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const [showEditNode, setShowEditNode] = useState(false);\n  const [editTitle, setEditTitle] = useState(\"\");\n  const [editContent, setEditContent] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const createNode = () => {\n    if (title.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (content.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${title}\",content:\"${content}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.createNode)\n          createNewAction(res.data.createNode.ID);\n        else alert(\"Something went wrong when creating node\");\n      });\n  };\n\n  const editNode = () => {\n    if (editTitle.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (editContent.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{editNode(nodeID:\"${props.match.params.id}\",title:\"${editTitle}\",content:\"${editContent}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.editNode) setShowEditNode(false);\n        else alert(\"Something went wrong when editing node\");\n      });\n  };\n\n  const createNewAction = (toID) => {\n    if (!toID) {\n      setShowSuggest(false);\n      setShowCreateNode(true);\n    } else {\n      app_fetch({\n        query: `mutation{suggestChoice(accountScreenName:\"${account.screenName}\",fromID:\"${props.match.params.id}\",action:\"${suggestAction}\",toID:\"${toID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.suggestChoice) {\n          setShowSuggest(false);\n          setShowCreateNode(false);\n          window.location.reload(false);\n        } else alert(\"Something went wrong when creating choice!\");\n      });\n    }\n  };\n\n  const deletePage = () => {\n    app_fetch({\n      query: `mutation{deleteNode(nodeID:\"${props.match.params.id}\")}`,\n    });\n  };\n\n  useEffect(() => {\n    const loggedInAs = cookies.get(\"account\");\n\n    app_fetch({\n      query: `query{getNode(ID:\"${props.match.params.id}\"){title,content,views,owner{screenName},canonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}},nonCanonChoices{suggestedBy{screenName},ID,action,to{ID},score,likedBy{screenName},dislikedBy{screenName}}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setNode(res.data.getNode);\n      else setNode(null);\n    });\n\n    app_fetch({\n      query: `query{getAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.getAccount);\n      else {\n        alert(\"Something went wrong when retrieving account\");\n        cookies.set(\"account\", \"\", { path: \"/\" });\n      }\n    });\n  }, []);\n\n  if (node === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (node === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1>{node.title}</h1>\n      <Container>{node.content}</Container>\n      <p />\n      {node.canonChoices.length ? (\n        <ChoiceColumns\n          owner={node.owner}\n          choices={node.canonChoices}\n          account={account}\n          canon={true}\n        />\n      ) : (\n        <p className=\"text-muted\">\n          By decree of <strong>{node.owner.screenName}</strong>, this journey\n          ends here.\n        </p>\n      )}\n      <p />\n\n      <p>\n        Owner:{\" \"}\n        <a href={`/crowdventure/account/${node.owner.screenName}`}>\n          {node.owner.screenName}\n        </a>\n        {account && node.owner.screenName === account.screenName ? (\n          <p>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                setEditTitle(node.title);\n                setEditContent(node.content);\n                setShowEditNode(true);\n              }}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => setShowConfirm(true)}\n            >\n              Delete\n            </Button>\n          </p>\n        ) : (\n          \"\"\n        )}\n      </p>\n      <h3>\n        Other options:\n        <Button\n          className=\"float-right\"\n          onClick={() => setShowSuggest(true)}\n          disabled={!account}\n          size=\"lg\"\n        >\n          Suggest New Choice\n        </Button>\n      </h3>\n      <p />\n\n      <ChoiceColumns\n        owner={node.owner}\n        choices={node.nonCanonChoices}\n        account={account}\n        canon={false}\n      />\n\n      <Modal show={showSuggest} onHide={() => setShowSuggest(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Suggesting New Choice</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Action:</Form.Label>\n            <Form.Control\n              required\n              value={suggestAction}\n              onChange={(e) => setSuggestAction(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Go to Page:</Form.Label>\n            <Form.Control\n              value={toPage}\n              placeholder=\"(Leave Empty to Create New Page)\"\n              onChange={(e) => setToPage(e.target.value)}\n            ></Form.Control>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => createNewAction(toPage)}>\n              Submit New Choice\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Creating New Page</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              required\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={createNode}>Create Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showEditNode} onHide={() => setShowEditNode(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Page</Modal.Title>\n        </Modal.Header>\n        <Form onSubmit={editNode}>\n          <Modal.Body>\n            <Form.Label>Title:</Form.Label>\n            <Form.Control\n              required\n              value={editTitle}\n              onChange={(e) => setEditTitle(e.target.value)}\n            ></Form.Control>\n            <Form.Label>Content:</Form.Label>\n            <Form.Control\n              required\n              value={editContent}\n              onChange={(e) => setEditContent(e.target.value)}\n            ></Form.Control>\n            {info ? info : \"\"}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\">Edit Page!</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n\n      <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Page</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Are you sure?</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n            No!\n          </Button>\n          <Button variant=\"primary\" onClick={deletePage} href=\"/crowdventure/\">\n            Yes!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Container>\n  );\n};\n\nconst ChoiceColumns = (props) => {\n  const { owner, account, choices, canon } = props;\n\n  const like = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{likeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.dislikeSuggestion)\n          window.location.reload(false);\n      });\n  };\n  const dislike = (choiceID) => {\n    if (account)\n      app_fetch({\n        query: `mutation{dislikeSuggestion(accountScreenName:\"${account.screenName}\",choiceID:\"${choiceID}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.dislikeSuggestion)\n          window.location.reload(false);\n      });\n  };\n\n  const makeCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeCanon) window.location.reload(false);\n    });\n  };\n  const makeNonCanon = (choiceID) => {\n    app_fetch({\n      query: `mutation{makeNonCanon(choiceID:\"${choiceID}\"){ID}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.makeNonCanon) window.location.reload(false);\n    });\n  };\n\n  const removeSuggestion = (choiceID) => {\n    app_fetch({\n      query: `mutation{removeSuggestion(choiceID:\"${choiceID}\")}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) window.location.reload(false);\n    });\n  };\n\n  return (\n    <CardColumns>\n      {choices.map((choice) => (\n        <Card className=\"text-center\">\n          <a\n            href={choice.to ? `/crowdventure/node/${choice.to.ID}` : \"\"}\n            style={{\n              pointerEvents: choice.to ? \"auto\" : \"none\",\n              color: choice.to ? undefined : \"grey\",\n            }}\n          >\n            <Card.Body style={{ cursor: \"pointer\" }}>\n              <Card.Title>{choice.action}</Card.Title>\n            </Card.Body>\n          </a>\n          <DropdownButton\n            variant=\"light\"\n            style={{ position: \"absolute\", top: \"0px\", right: \"0px\" }}\n            size=\"sm\"\n            drop=\"right\"\n            title={<span class=\"fa\">&#xf013;</span>}\n          >\n            <Dropdown.Item\n              disabled={!account || account.screenName !== owner.screenName}\n              onClick={() =>\n                canon ? makeNonCanon(choice.ID) : makeCanon(choice.ID)\n              }\n            >\n              Make {canon ? \"Nonc\" : \"C\"}anon\n            </Dropdown.Item>\n            <Dropdown.Item\n              disabled={\n                !account ||\n                (account.screenName !== choice.suggestedBy.screenName &&\n                  account.screenName !== owner.screenName)\n              }\n              onClick={() => removeSuggestion(choice.ID)}\n            >\n              Delete\n            </Dropdown.Item>\n            <Dropdown.Item\n              disabled={\n                !account || choice.suggestedBy.screenName !== account.screenName\n              }\n            >\n              Edit\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item>Report</Dropdown.Item>\n          </DropdownButton>\n          <Card.Footer>\n            <a\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.dislikedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"red\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-down\"\n              onClick={() => dislike(choice.ID)}\n            ></a>\n            {\" \" + choice.score + \" \"}\n            <a\n              style={{\n                pointerEvents: account ? \"auto\" : \"none\",\n                color: account\n                  ? choice.likedBy\n                      .map((account) => account.screenName)\n                      .includes(account.screenName)\n                    ? \"green\"\n                    : \"black\"\n                  : \"grey\",\n              }}\n              className=\"fa fa-thumbs-up\"\n              onClick={() => like(choice.ID)}\n            ></a>\n            <br />\n            <small className=\"text-muted\">\n              Suggested By:{\" \"}\n              <a\n                href={`/crowdventure/account/${choice.suggestedBy.screenName}`}\n              >\n                {choice.suggestedBy.screenName}\n              </a>\n            </small>\n          </Card.Footer>\n        </Card>\n      ))}\n    </CardColumns>\n  );\n};\n\nexport default Node;\n","import React, { useState, useEffect } from \"react\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Navbar,\n  Container,\n  Button,\n  Modal,\n  Form,\n  Alert,\n  CardGroup,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst Account = (props) => {\n  const [account, setAccount] = useState(undefined);\n  const [loggedInAs, setLoggedInAs] = useState(new Cookies().get(\"account\"));\n\n  const [showCreateNode, setShowCreateNode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const [showProfilePic, setShowProfilePic] = useState(false);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{getAccount(screenName:\"${props.match.params.id}\"){bio,screenName,nodes{title,views},suggestedChoices{action, from{title}, to{title}},totalNodeViews,totalSuggestionScore, nodes{ID,title,views}}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data) setAccount(res.data.getAccount);\n      else alert(\"Something went wrong when retrieving account\");\n    });\n  }, []);\n\n  const createNode = () => {\n    if (title.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The title cannot contain (\") character! Try using (') or (`) instead!\n        </p>\n      );\n    else if (content.includes('\"'))\n      setInfo(\n        <p style={{ color: \"red\" }}>\n          The content cannot contain (\") character! Try using (') or (`)\n          instead!\n        </p>\n      );\n    else\n      app_fetch({\n        query: `mutation{createNode(accountScreenName:\"${account.screenName}\",title:\"${title}\",content:\"${content}\"){ID}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.createNode) setShowCreateNode(false);\n        else alert(\"Something went wrong when creating node\");\n      });\n  };\n\n  const deleteAccount = () => {\n    new Cookies().set(\"account\", \"\", { path: \"/\" });\n    app_fetch({\n      query: `mutation{deleteAccount(screenName:\"${props.match.params.id}\")}`,\n    });\n  };\n\n  if (account === undefined) {\n    return (\n      <Alert variant=\"light\">\n        <Alert.Heading>Loading...</Alert.Heading>\n      </Alert>\n    );\n  }\n\n  if (account === null)\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Oh snap! You ran into an error</Alert.Heading>\n        <p>\n          This page does not exist, or maybe our database is down. Who knows?\n          Not you. Hahahaha\n        </p>\n      </Alert>\n    );\n\n  return (\n    <Container>\n      <h1 style={{ position: \"relative\", left: \"5px\" }}>\n        {account.screenName}\n      </h1>\n      {account.bio ? <p>Bio</p> : \"\"}\n      <h3>Pages:</h3>\n      <CardColumns>\n        {account.nodes.map((node) => (\n          <Card>\n            <a href={`/crowdventure/node/${node.ID}`}>\n              <Card.Body>\n                <Card.Title>{node.title}</Card.Title>\n              </Card.Body>\n            </a>\n            <Card.Footer>\n              Created by: {account.screenName}\n              <br />\n              Views:{\" \" + node.views}\n            </Card.Footer>\n          </Card>\n        ))}\n      </CardColumns>\n      <p />\n      {loggedInAs === account.screenName ? (\n        <Container>\n          <Button onClick={() => setShowCreateNode(true)}>\n            Create new Page\n          </Button>{\" \"}\n          <Button\n            href=\"/crowdventure/\"\n            variant=\"danger\"\n            onClick={() => {\n              new Cookies().set(\"account\", \"\", { path: \"/\" });\n            }}\n          >\n            Log out\n          </Button>{\" \"}\n          <Button variant=\"danger\" onClick={() => setShowConfirm(true)}>\n            Delete\n          </Button>\n          <Modal show={showCreateNode} onHide={() => setShowCreateNode(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Creating New Page</Modal.Title>\n            </Modal.Header>\n            <Form onSubmit={createNode}>\n              <Modal.Body>\n                <Form.Label>Title:</Form.Label>\n                <Form.Control\n                  required\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                ></Form.Control>\n                <Form.Label>Content:</Form.Label>\n                <Form.Control\n                  required\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                ></Form.Control>\n                {info ? info : \"\"}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button type=\"submit\">Create Page!</Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n          <Modal show={showConfirm} onHide={() => setShowConfirm(false)}>\n            <Modal.Header closeButton>\n              <Modal.Title>Delete Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Are you sure?</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"danger\" onClick={() => setShowConfirm(false)}>\n                No!\n              </Button>\n              <Button\n                variant=\"primary\"\n                onClick={deleteAccount}\n                href=\"/crowdventure/\"\n              >\n                Yes!\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </Container>\n      ) : (\n        \"\"\n      )}\n    </Container>\n  );\n};\n\nexport default Account;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Card,\n  CardColumns,\n  CardDeck,\n  CardGroup,\n} from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst Home = () => {\n  const [topNodes, setTopNodes] = useState(undefined);\n  const [topAccounts, setTopAccounts] = useState(undefined);\n\n  useEffect(() => {\n    app_fetch({\n      query: `query{allNodes{ID,title,owner{screenName},views}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allNodes) setTopNodes(res.data.allNodes);\n      else alert(\"Something went wrong when retrieving nodes\");\n    });\n\n    app_fetch({\n      query: `query{allAccounts{screenName,totalNodeViews,totalSuggestionScore}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.allAccounts)\n        setTopAccounts(res.data.allAccounts);\n      else alert(\"Something went wrong when retrieving accounts\");\n    });\n  }, []);\n  return (\n    <Container>\n      <h1>Welcome!</h1>\n      <Container>\n        Crowdventure is a Crowd-Sourced Choose/Create-Your-Own-Adventure-Game!\n      </Container>\n      <p />\n      <h3>Featured Pages:</h3>\n      {topNodes ? (\n        <CardColumns>\n          {topNodes.slice(0, 1).map((node) => (\n            <Card>\n              <a href={`/crowdventure/node/${node.ID}`}>\n                <Card.Body>\n                  <Card.Title>{node.title}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                Created by:{\" \"}\n                <a href={`/crowdventure/account/${node.owner.screenName}`}>\n                  {node.owner.screenName}\n                </a>\n                <br />\n                Views:{\" \" + node.views}\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )}\n      <h3>Featured Accounts:</h3>\n      {topAccounts ? (\n        <CardColumns>\n          {topAccounts.map((account) => (\n            <Card>\n              <a href={`/crowdventure/account/${account.screenName}`}>\n                <Card.Body>\n                  <Card.Title>{account.screenName}</Card.Title>\n                </Card.Body>\n              </a>\n              <Card.Footer>\n                Total Views:{account.totalNodeViews}\n                <br />\n                Total Score:{account.totalSuggestionScore}\n              </Card.Footer>\n            </Card>\n          ))}\n        </CardColumns>\n      ) : (\n        \"\"\n      )}\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Node from \"./Node\";\nimport Account from \"./Account\";\nimport Home from \"./Home\";\n\nimport Cookies from \"universal-cookie\";\nimport {\n  Navbar,\n  Container,\n  Button,\n  Modal,\n  Form,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\n\nimport app_fetch from \"./index\";\n\nconst App = () => {\n  return (\n    <Container>\n      <Navbar>\n        <Navbar.Brand href=\"/crowdventure/\">\n          <img\n            src={process.env.PUBLIC_URL + \"/logo.png\"}\n            alt=\"Crowdventure Logo\"\n          />\n        </Navbar.Brand>\n        <Navbar.Collapse className=\"justify-content-end\">\n          <AccountManager />\n        </Navbar.Collapse>\n      </Navbar>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/crowdventure\" component={Home} exact />\n          <Route path=\"/crowdventure/node/:id\" component={Node} />\n          <Route path=\"/crowdventure/account/:id\" component={Account} />\n        </Switch>\n      </BrowserRouter>\n    </Container>\n  );\n};\n\nconst AccountManager = () => {\n  const [showLogin, setShowLogin] = useState(false);\n  const [showSignUp, setShowSignUp] = useState(false);\n  const [account, setAccount] = useState(undefined);\n  const [info, setInfo] = useState(undefined);\n\n  const [screenName, setScreenName] = useState(\"\");\n  const [pass1, setPass1] = useState(\"\");\n  const [pass2, setPass2] = useState(\"\");\n\n  const handleSubmitSignUp = () => {\n    if (pass1 !== pass2)\n      setInfo(<div style={{ color: \"red\" }}>Passwords must match!</div>);\n    else if (screenName.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Screen Name cannot include (\") character!\n        </div>\n      );\n    else if (pass1.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Password cannot include (\") character!\n        </div>\n      );\n    else\n      app_fetch({\n        query: `query{getAccount(screenName:\"${screenName}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getAccount)\n          setInfo(\n            <div style={{ color: \"red\" }}>That account already exists!</div>\n          );\n        else {\n          createAccount();\n        }\n      });\n  };\n\n  const createAccount = () =>\n    app_fetch({\n      query: `mutation{createAccount(screenName:\"${screenName}\",password:\"${pass1}\"){screenName}}`,\n    }).then((res, err) => {\n      if (err) alert(err);\n      if (res.data && res.data.createAccount) {\n        new Cookies().set(\"account\", screenName, { path: \"/\" });\n        setAccount(res.data.createAccount);\n        setShowSignUp(false);\n        window.location.reload(false);\n      } else alert(\"Something went wrong when creating account\");\n    });\n\n  const login = () => {\n    if (screenName.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Screen Name cannot include (\") character!\n        </div>\n      );\n    else if (pass1.includes('\"'))\n      setInfo(\n        <div style={{ color: \"red\" }}>\n          Password cannot include (\") character!\n        </div>\n      );\n    else {\n      app_fetch({\n        query: `query{getAccount(screenName:\"${screenName}\",password:\"${pass1}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data && res.data.getAccount) {\n          new Cookies().set(\"account\", screenName, { path: \"/\" });\n          setAccount(res.data.getAccount);\n          setShowLogin(false);\n          window.location.reload(false);\n        } else\n          setInfo(\n            <div style={{ color: \"red\" }}>\n              That account does not exist or the password did not match!\n            </div>\n          );\n      });\n    }\n  };\n\n  useEffect(() => {\n    let loggedInAs = new Cookies().get(\"account\"); // INSECURE DOES NOT CHECK FOR PASSWORD WHEN YOU LOAD PAGE BUT WAHTEVER\n    if (loggedInAs)\n      app_fetch({\n        query: `query{getAccount(screenName:\"${loggedInAs}\"){screenName}}`,\n      }).then((res, err) => {\n        if (err) alert(err);\n        if (res.data) setAccount(res.data.getAccount);\n        else {\n          alert(\"Something went wrong when logging in\");\n          new Cookies().set(\"account\", \"\", { path: \"/\" });\n        }\n      });\n  }, []);\n\n  if (account === undefined || account === null) {\n    return (\n      <Navbar.Text>\n        You are not logged in.{\" \"}\n        <a href=\"#\" onClick={() => setShowLogin(true)}>\n          Log In\n        </a>{\" \"}\n        or{\" \"}\n        <a href=\"#\" onClick={() => setShowSignUp(true)}>\n          Sign Up\n        </a>\n        <Modal show={showLogin} onHide={() => setShowLogin(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Log in</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Label>Screen Name:</Form.Label>\n              <Form.Control\n                required\n                value={screenName}\n                onChange={(e) => setScreenName(e.target.value)}\n              />\n              <Form.Label>Password:</Form.Label>\n              <Form.Control\n                required\n                type=\"password\"\n                value={pass1}\n                onChange={(e) => setPass1(e.target.value)}\n              />\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => login()}>\n                Log in\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n        <Modal show={showSignUp} onHide={() => setShowSignUp(false)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Sign Up for Crowdventure!</Modal.Title>\n          </Modal.Header>\n          <Form>\n            <Modal.Body>\n              <Form.Group>\n                <Form.Label>Screen Name:</Form.Label>\n                <Form.Control\n                  required\n                  value={screenName}\n                  onChange={(e) => setScreenName(e.target.value)}\n                />\n                <Form.Label>Create Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass1}\n                  onChange={(e) => setPass1(e.target.value)}\n                />\n                <Form.Label>Confirm Password:</Form.Label>\n                <Form.Control\n                  required\n                  type=\"password\"\n                  value={pass2}\n                  onChange={(e) => setPass2(e.target.value)}\n                />\n              </Form.Group>\n              {info ? info : \"\"}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={() => handleSubmitSignUp()}>\n                Sign Up\n              </Button>\n            </Modal.Footer>\n          </Form>\n        </Modal>\n      </Navbar.Text>\n    );\n  }\n\n  return (\n    <Navbar.Text>\n      You are logged in as:{\" \"}\n      <a href={`/crowdventure/account/${account.screenName}`}>\n        {account.screenName}\n      </a>\n    </Navbar.Text>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst { createApolloFetch } = require(\"apollo-fetch\");\n\nconst app_fetch = createApolloFetch({\n  uri: \"https://3yfp7ejc0m.execute-api.us-east-1.amazonaws.com/dev/graphql\",\n});\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nexport default app_fetch;\n"],"sourceRoot":""}